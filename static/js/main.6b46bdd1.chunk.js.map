{"version":3,"sources":["components/header/Header.tsx","redux/slices/apiSlice.ts","redux/slices/mainSlice.ts","components/main_page/MainPage.tsx","redux/store/hooks.ts","components/film_page/FilmPage.tsx","App.tsx","redux/store/store.ts","index.tsx"],"names":["Header","className","to","placeholder","filmsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAllFilms","query","movies","getFilmById","id","useGetAllFilmsQuery","useGetFilmByIdQuery","mainSlice","createSlice","name","initialState","reducers","changeId","state","action","payload","actions","MainPage","data","error","isLoading","films","dispatch","useDispatch","handleImageError","event","target","src","map","film","onClick","title","poster_path","onError","alt","useAppSelector","useSelector","FilmPage","App","path","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAgBeA,EAdA,WACb,OACE,qCACE,4CACA,sBAAKC,UAAU,WAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,4CAEF,uBAAOC,YAAY,6B,eCPdC,EAAWC,YAAU,CAChCC,YAAa,WACbC,UAAWC,YAAe,CAAEC,QAAS,uCACrCC,UAAW,SAACC,GAAD,MAAc,CACvBC,YAAaD,EAAQE,MAAqB,CACxCA,MAAO,SAACC,GAAD,iBAAgBA,MAEzBC,YAAaJ,EAAQE,MAAoB,CACvCA,MAAO,SAACG,GAAD,wBAAmBA,UAKjBC,EAA6Cb,EAA7Ca,oBAAqBC,EAAwBd,EAAxBc,oB,sBCX9BC,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAJmB,CAAEN,GAAI,GAKzBO,SAAU,CACRC,SADQ,SACCC,EAAkBC,GACzB,OAAO,2BAAKD,GAAZ,IAAmBT,GAAIU,EAAOC,cAKrBH,EAAaL,EAAUS,QAAvBJ,SACAL,IAAf,QCoCeU,EA9CE,WAAO,IAAD,EACcZ,EAAoB,UAA/Ca,EADa,EACbA,KAAMC,EADO,EACPA,MAAOC,EADA,EACAA,UACfC,EAAQH,EAAOA,EAAKA,KAAO,KAE3BI,EAAWC,cAMXC,EAAmB,SAACC,GACvBA,EAAMC,OAA4BC,IACjC,8NAGJ,OACE,mCACGR,EACC,iEACEC,EACF,kDACEC,EACF,mCACE,qBAAKhC,UAAU,gBAAf,SACGgC,EAAMO,KAAI,SAACC,GAAD,OACT,cAAC,IAAD,CAAMvC,GAAE,qBAAgBuC,EAAKzB,IAA7B,SACE,sBAAK0B,QAAS,kBApBN1B,EAoByByB,EAAKzB,QAnBlDkB,EAASV,EAASR,IADC,IAACA,GAoBR,UACE,6BAAKyB,EAAKE,QACV,8BACE,qBACE3B,GAAG,QACHuB,IAAKE,EAAKG,YACVC,QAAST,EACTU,IAAKL,EAAKE,sBAQtB,QC1CGI,EAAkDC,ICuBhDC,EAzBE,WACf,IAAMjC,EAAK+B,GAAe,SAACtB,GAAD,OAAWA,EAAMN,UAAUH,MADhC,EAGcE,EAAoBF,GAA/Cc,EAHa,EAGbA,KAAMC,EAHO,EAGPA,MAAOC,EAHA,EAGAA,UACfS,EAAOX,GAAc,KAE3B,OACE,mCACGC,EACC,iEACEC,EACF,kDACES,EACF,qCACE,gCACE,6BAAKA,EAAKE,QACV,qBAAKJ,IAAKE,EAAKG,YAAaE,IAAKL,EAAKE,WAH1C,QAOE,Q,OCEKO,I,EAAAA,EAlBf,WACE,OACE,qBAAKjD,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkD,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,e,QCZCC,GAAO,mBACjBhD,EAASE,YAAcF,EAASgD,SADf,0BAEPjC,GAFO,GAKPkC,EAAQC,YAAe,CAClCF,UAEAG,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAOrD,EAASmD,eAG3CG,YAAeL,EAAMnB,UCVrByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.6b46bdd1.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <h1>Film World</h1>\r\n      <div className=\"miniForm\">\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n        <input placeholder=\"search for a film\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { Film, Films } from \"../../shared/types\";\r\n\r\nexport const filmsApi = createApi({\r\n  reducerPath: \"filmsApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://reactjs-cdp.herokuapp.com/\" }),\r\n  endpoints: (builder) => ({\r\n    getAllFilms: builder.query<Films, string>({\r\n      query: (movies) => `/${movies}`,\r\n    }),\r\n    getFilmById: builder.query<Film, number>({\r\n      query: (id) => `/movies/${id}`,\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetAllFilmsQuery, useGetFilmByIdQuery } = filmsApi;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FilmState } from \"../../shared/types\";\r\n\r\nconst initialState = { id: 0 } as FilmState;\r\n\r\nconst mainSlice = createSlice({\r\n  name: \"main\",\r\n  initialState,\r\n  reducers: {\r\n    changeId(state: FilmState, action: PayloadAction<number>) {\r\n      return { ...state, id: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeId } = mainSlice.actions;\r\nexport default mainSlice.reducer;\r\n","import { useGetAllFilmsQuery } from \"../../redux/slices/apiSlice\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeId } from \"../../redux/slices/mainSlice\";\r\nimport { SyntheticEvent } from \"react\";\r\n\r\nconst MainPage = () => {\r\n  const { data, error, isLoading } = useGetAllFilmsQuery(\"movies\");\r\n  const films = data ? data.data : null;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleIdSend = (id: number) => {\r\n    dispatch(changeId(id));\r\n  };\r\n\r\n  const handleImageError = (event: SyntheticEvent) => {\r\n    (event.target as HTMLImageElement).src =\r\n      \"https://lh3.googleusercontent.com/proxy/Hpu9bjpJqqhAcrc2_3CdpUgQKDQGHvgnLDm9gJ6CWQTHT7oypUUpwS1-IaNE5qGcKkCJSIvKyspyder7angC361V_YucT_pC9xqLmzwYBiw1ciVUaRUOL6oEufN_IjbgAgTG3T6CNCkjTl05kL4nKUMTB7-KksrU-sI3cJxdLvpl-RDetQ\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {error ? (\r\n        <>Oh no, there was an error</>\r\n      ) : isLoading ? (\r\n        <>Loading...</>\r\n      ) : films ? (\r\n        <>\r\n          <div className=\"filmContainer\">\r\n            {films.map((film) => (\r\n              <Link to={`/film_page/${film.id}`}>\r\n                <div onClick={() => handleIdSend(film.id)}>\r\n                  <h3>{film.title}</h3>\r\n                  <div>\r\n                    <img\r\n                      id=\"image\"\r\n                      src={film.poster_path}\r\n                      onError={handleImageError}\r\n                      alt={film.title}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useGetFilmByIdQuery } from \"../../redux/slices/apiSlice\";\r\nimport { useAppSelector } from \"../../redux/store/hooks\";\r\n\r\nconst FilmPage = () => {\r\n  const id = useAppSelector((state) => state.mainSlice.id);\r\n\r\n  const { data, error, isLoading } = useGetFilmByIdQuery(id);\r\n  const film = data ? data : null;\r\n\r\n  return (\r\n    <>\r\n      {error ? (\r\n        <>Oh no, there was an error</>\r\n      ) : isLoading ? (\r\n        <>Loading...</>\r\n      ) : film ? (\r\n        <>\r\n          <div>\r\n            <h3>{film.title}</h3>\r\n            <img src={film.poster_path} alt={film.title} />\r\n          </div>\r\n          ))\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilmPage;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/header/Header\";\nimport MainPage from \"./components/main_page/MainPage\";\nimport FilmPage from \"./components/film_page/FilmPage\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route path=\"/film_page\">\n            <FilmPage />\n          </Route>\n          <Route path=\"/\">\n            <MainPage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\r\nimport { filmsApi } from \"../slices/apiSlice\";\r\nimport mainSlice from \"../slices/mainSlice\";\r\n\r\nexport const reducer = {\r\n  [filmsApi.reducerPath]: filmsApi.reducer,\r\n  mainSlice: mainSlice,\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer,\r\n\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(filmsApi.middleware),\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}